
[1mNAME[0m

	TLC - provides model checking and simulation of TLA+ specifications - Version 2.18 of Day Month 20??


[1mSYNOPSIS[0m

	[1mTLC[0m [[1m-h[0m] [[1m-cleanup[0m] [[1m-continue[0m] [[1m-deadlock[0m] [[1m-debug[0m] [[1m-difftrace[0m] [[1m-gzip[0m] [[1m-noGenerateSpecTE[0m] [[1m-nowarning[0m] [[1m-terse[0m] [[1m-tool[0m] [[1m-view[0m] [[1m-checkpoint[0m [3mminutes[0m] [[1m-config[0m [3mfile[0m] [[1m-coverage[0m [3mminutes[0m] [[1m-dfid[0m [3mnum[0m] [[1m-dump[0m [dot actionlabels,colorize,snapshot] [3mfile[0m] [[1m-dumpTrace[0m [3mformat file[0m] [[1m-fp[0m [3mN[0m] [[1m-fpbits[0m [3mnum[0m] [[1m-fpmem[0m [3mnum[0m] [[1m-maxSetSize[0m [3mnum[0m] [[1m-metadir[0m [3mpath[0m] [[1m-postCondition[0m [3mmod!oper[0m] [[1m-recover[0m [3mid[0m] [[1m-teSpecOutDir[0m [3msome-dir-name[0m] [[1m-userFile[0m [3mfile[0m] [[1m-workers[0m [3mnum[0m] [1m-debugger[0m [3mnosuspend[0m SPEC
	[1mTLC[0m [[1m-h[0m] [[1m-cleanup[0m] [[1m-continue[0m] [[1m-deadlock[0m] [[1m-debug[0m] [[1m-difftrace[0m] [[1m-gzip[0m] [[1m-noGenerateSpecTE[0m] [[1m-nowarning[0m] [[1m-terse[0m] [[1m-tool[0m] [[1m-aril[0m [3mnum[0m] [[1m-checkpoint[0m [3mminutes[0m] [[1m-config[0m [3mfile[0m] [[1m-coverage[0m [3mminutes[0m] [[1m-depth[0m [3mnum[0m] [[1m-dump[0m [dot actionlabels,colorize,snapshot] [3mfile[0m] [[1m-dumpTrace[0m [3mformat file[0m] [[1m-fp[0m [3mN[0m] [[1m-fpbits[0m [3mnum[0m] [[1m-fpmem[0m [3mnum[0m] [[1m-maxSetSize[0m [3mnum[0m] [[1m-metadir[0m [3mpath[0m] [[1m-postCondition[0m [3mmod!oper[0m] [[1m-recover[0m [3mid[0m] [[1m-seed[0m [3mnum[0m] [[1m-teSpecOutDir[0m [3msome-dir-name[0m] [[1m-userFile[0m [3mfile[0m] [[1m-workers[0m [3mnum[0m] [1m-debugger[0m [3mnosuspend[0m -simulate [file=X,num=Y] SPEC

[1mDESCRIPTION[0m

	The model checker ([1mTLC[0m) provides the functionalities of model checking
	or simulation of TLA+ specifications. It may be invoked from the command
	line, or via the model checking functionality of the Toolbox.
	
	By default, [1mTLC[0m starts in the model checking mode using breadth-first
	approach for the state space exploration.
	
	A pretty-printed and in-depth description of [1mTLC[0m can be found at:
	
		    https://lamport.azurewebsites.net/tla/current-tools.pdf

[1mOPTIONS[0m

	[1m-aril[0m [3mnum[0m
		adjust the seed for random simulation; defaults to 0
	[1m-checkpoint[0m [3mminutes[0m
		interval between check point; defaults to 30
	[1m-cleanup[0m
		clean up the states directory
	[1m-config[0m [3mfile[0m
		provide the configuration file; defaults to SPEC.cfg
	[1m-continue[0m
		continue running even when an invariant is violated; default
		behavior is to halt on first violation
	[1m-coverage[0m [3mminutes[0m
		interval between the collection of coverage information;
		if not specified, no coverage will be collected
	[1m-deadlock[0m
		if specified DO NOT CHECK FOR DEADLOCK. Setting the flag is
		the same as setting CHECK_DEADLOCK to FALSE in config
		file. When -deadlock is specified, config entry is
		ignored; default behavior is to check for deadlocks
	[1m-debug[0m
		print various debugging information - not for production use
		
	[1m-debugger[0m [3mnosuspend[0m
		run simulation or model-checking in debug mode such that TLC's
		state-space exploration can be temporarily halted and variables
		be inspected. The only debug front-end so far is the TLA+
		VSCode extension, which has to be downloaded and configured
		separately, though other front-ends could be implemeted via the
		debug-adapter-protocol.
		Specifying the optional parameter 'nosuspend' causes
		TLC to start state-space exploration without waiting for a
		debugger front-end to connect. Without 'nosuspend', TLC
		suspends state-space exploration before the first ASSUME is
		evaluated (but after constants are processed). With 'nohalt',
		TLC does not halt state-space exploration when an evaluation
		or runtime error is caught. Without 'nohalt', evaluation or
		runtime errors can be inspected in the debugger before TLC
		terminates. The optional parameter 'port=1274' makes the
		debugger listen on port 1274 instead of on the standard
		port 4712, and 'port=0' lets the debugger choose a port.
		Multiple optional parameters must be comma-separated.
		Specifying '-debugger' implies '-workers 1'.
	[1m-depth[0m [3mnum[0m
		specifies the depth of random simulation; defaults to 100
	[1m-dfid[0m [3mnum[0m
		run the model check in depth-first iterative deepening
		starting with an initial depth of 'num'
	[1m-difftrace[0m
		show only the differences between successive states when
		printing trace information; defaults to printing
		full state descriptions
	[1m-dump[0m [3mfile[0m
		dump all states into the specified file; this parameter takes
		optional parameters for dot graph generation. Specifying
		'dot' allows further options, comma delimited, of zero
		or more of 'actionlabels', 'colorize', 'snapshot' to be
		specified before the '.dot'-suffixed filename
	[1m-dumpTrace[0m [3mformat file[0m
		in case of a property violation, formats the TLA+ error trace
		as the given format and dumps the output to the specified
		file.  The file is relative to the same directory as the
		main spec. At the time of writing, TLC supports the "tla"
		and the "json" formats.  To dump to multiple formats, the
		-dumpTrace parameter may appear multiple times.
		The git commits 1eb815620 and 386eaa19f show that adding new
		formats is easy.
		
	[1m-fp[0m [3mN[0m
		use the Nth irreducible polynomial from the list stored
		in the class FP64
	[1m-fpbits[0m [3mnum[0m
		the number of MSB used by MultiFPSet to create nested
		FPSets; defaults to 1
	[1m-fpmem[0m [3mnum[0m
		a value in (0.0,1.0) representing the ratio of total
		physical memory to devote to storing the fingerprints
		of found states; defaults to 0.25
	[1m-gzip[0m
		control if gzip is applied to value input/output streams;
		defaults to 'off'
	[1m-h[0m
		display these help instructions
	[1m-maxSetSize[0m [3mnum[0m
		the size of the largest set which TLC will enumerate; defaults
		to 1000000 (10^6)
	[1m-metadir[0m [3mpath[0m
		specify the directory in which to store metadata; defaults to
		SPEC-directory/states if not specified
	[1m-noGenerateSpecTE[0m
		Whether to skip generating a trace exploration (TE) spec in
		the event of TLC finding a state or behavior that does
		not satisfy the invariants; TLC's default behavior is to
		generate this spec.
	[1m-nowarning[0m
		disable all warnings; defaults to reporting warnings
	[1m-postCondition[0m [3mmod!oper[0m
		evaluate the given (constant-level) operator oper in the TLA+
		module mod at the end of model-checking.
	[1m-recover[0m [3mid[0m
		recover from the checkpoint with the specified id
	[1m-seed[0m [3mnum[0m
		provide the seed for random simulation; defaults to a
		random long pulled from a pseudo-RNG
	[1m-simulate[0m
		run in simulation mode; optional parameters may be specified
		comma delimited: 'num=X' where X is the maximum number of
		total traces to generate and/or 'file=Y' where Y is the
		absolute-pathed prefix for trace file modules to be written
		by the simulation workers; for example Y='/a/b/c/tr' would
		produce, e.g, '/a/b/c/tr_1_15'
	[1m-teSpecOutDir[0m [3msome-dir-name[0m
		Directory to which to output the TE spec if TLC generates
		an error trace. Can be a relative (to root spec dir)
		or absolute path. By default the TE spec is output
		to the same directory as the main spec.
	[1m-terse[0m
		do not expand values in Print statements; defaults to
		expanding values
	[1m-tool[0m
		run in 'tool' mode, surrounding output with message codes;
		if '-generateSpecTE' is specified, this is enabled
		automatically
	[1m-userFile[0m [3mfile[0m
		an absolute path to a file in which to log user output (for
		example, that which is produced by Print)
	[1m-view[0m
		apply VIEW (if provided) when printing out states
	[1m-workers[0m [3mnum[0m
		the number of TLC worker threads; defaults to 1. Use 'auto'
		to automatically select the number of threads based on the
		number of available cores.

[1mTIPS[0m

	When using the  '-generateSpecTE' you can version the generated specification by doing:
		./tla2tools.jar -generateSpecTE MySpec.tla && NAME="SpecTE-$(date +%s)" && sed -e "s/MODULE SpecTE/MODULE $NAME/g" SpecTE.tla > $NAME.tla

	If, while checking a SpecTE created via '-generateSpecTE', you get an error message concerning
	CONSTANT declaration and you've previous used 'integers' as model values, rename your
	model values to start with a non-numeral and rerun the model check to generate a new SpecTE.

	If, while checking a SpecTE created via '-generateSpecTE', you get a warning concerning
	duplicate operator definitions, this is likely due to the 'monolith' specification
	creation. Try re-running TLC adding the 'nomonolith' option to the '-generateSpecTE'
	parameter.

